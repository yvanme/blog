(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{378:function(e,t,s){"use strict";s.r(t);var n=s(44),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"kafka安装-单机版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka安装-单机版"}},[e._v("#")]),e._v(" Kafka安装（单机版）")]),e._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),s("p",[e._v("[TOC]")]),e._v(" "),s("p",[s("strong",[e._v("环境：CentOS7、kafka_2.12-2.3.0版本")])]),e._v(" "),s("p",[s("strong",[e._v("安装目录：/app/kafka_2.12-2.3.0")])]),e._v(" "),s("p",[s("strong",[e._v("备注：kafka依赖zookeeper，因此在安装kafka之前需要安装好zookeeper环境")])]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("安装jdk1.8")])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("安装Zookeeper")])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("kafka搭建")])])]),e._v(" "),s("li",[s("p",[e._v("下载解压kafka_2.12-2.3.0")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("tar -zvxf kafka_2.12-2.3.0.tgz\n")])])]),s("ul",[s("li",[s("strong",[e._v("配置server.properties")])])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Licensed to the Apache Software Foundation (ASF) under one or more")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# contributor license agreements.  See the NOTICE file distributed with")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this work for additional information regarding copyright ownership.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The ASF licenses this file to You under the Apache License, Version 2.0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# (the "License"); you may not use this file except in compliance with')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the License.  You may obtain a copy of the License at")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    http://www.apache.org/licenses/LICENSE-2.0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Unless required by applicable law or agreed to in writing, software")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# distributed under the License is distributed on an "AS IS" BASIS,')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# See the License for the specific language governing permissions and")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limitations under the License.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# see kafka.server.KafkaConfig for additional details and defaults")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Server Basics #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The id of the broker. This must be set to a unique integer for each broker.")]),e._v("\nbroker.id"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Socket Server Settings #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The address the socket server listens on. It will get the value returned from ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# java.net.InetAddress.getCanonicalHostName() if not configured.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   FORMAT:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     listeners = listener_name://host_name:port")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   EXAMPLE:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     listeners = PLAINTEXT://your.host.name:9092")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#listeners=PLAINTEXT://:9092")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("listeners")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("PLAINTEXT://worker:9092\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Hostname and port the broker will advertise to producers and consumers. If not set, ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# it uses the value for "listeners" if configured.  Otherwise, it will use the value')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# returned from java.net.InetAddress.getCanonicalHostName().")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#advertised.listeners=PLAINTEXT://your.host.name:9092")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The number of threads that the server uses for receiving requests from the network and sending responses to the network")]),e._v("\nnum.network.threads"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The number of threads that the server uses for processing requests, which may include disk I/O")]),e._v("\nnum.io.threads"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The send buffer (SO_SNDBUF) used by the socket server")]),e._v("\nsocket.send.buffer.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("102400")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The receive buffer (SO_RCVBUF) used by the socket server")]),e._v("\nsocket.receive.buffer.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("102400")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The maximum size of a request that the socket server will accept (protection against OOM)")]),e._v("\nsocket.request.max.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("104857600")]),e._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Log Basics #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A comma separated list of directories under which to store log files")]),e._v("\nlog.dirs"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/apps/kafka_2.12-2.3.0/kafka-logs\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default number of log partitions per topic. More partitions allow greater")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# parallelism for consumption, but this will also result in more files across")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the brokers.")]),e._v("\nnum.partitions"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This value is recommended to be increased for installations with data dirs located in RAID array.")]),e._v("\nnum.recovery.threads.per.data.dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Internal Topic Settings  #############################")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.")]),e._v("\noffsets.topic.replication.factor"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\ntransaction.state.log.replication.factor"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\ntransaction.state.log.min.isr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Log Flush Policy #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Messages are immediately written to the filesystem but by default we only fsync() to sync")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the OS cache lazily. The following configurations control the flush of data to disk.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# There are a few important trade-offs here:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    1. Durability: Unflushed data may be lost if you are not using replication.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The settings below allow one to configure the flush policy to flush data after a period of time or")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# every N messages (or both). This can be done globally and overridden on a per-topic basis.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The number of messages to accept before forcing a flush of data to disk")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#log.flush.interval.messages=10000")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The maximum amount of time a message can sit in a log before we force a flush")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#log.flush.interval.ms=1000")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Log Retention Policy #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following configurations control the disposal of log segments. The policy can")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# be set to delete segments after a period of time, or after a given size has accumulated.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from the end of the log.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The minimum age of a log file to be eligible for deletion due to age")]),e._v("\nlog.retention.hours"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("168")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A size-based retention policy for logs. Segments are pruned from the log unless the remaining")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# segments drop below log.retention.bytes. Functions independently of log.retention.hours.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#log.retention.bytes=1073741824")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The maximum size of a log segment file. When this size is reached a new log segment will be created.")]),e._v("\nlog.segment.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1073741824")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The interval at which log segments are checked to see if they can be deleted according")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to the retention policies")]),e._v("\nlog.retention.check.interval.ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("300000")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Zookeeper #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Zookeeper connection string (see zookeeper docs for details).")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This is a comma separated host:port pairs, each corresponding to a zk")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# You can also append an optional chroot string to the urls to specify the")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# root directory for all kafka znodes.")]),e._v("\nzookeeper.connect"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("worker:2181\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Timeout in ms for connecting to zookeeper")]),e._v("\nzookeeper.connection.timeout.ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6000")]),e._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("############################# Group Coordinator Settings #############################")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default value for this is 3 seconds.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.")]),e._v("\ngroup.initial.rebalance.delay.ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n")])])]),s("ul",[s("li",[s("strong",[e._v("启动Kafka")])])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#一键启动Kafka")]),e._v("\nbin/kafka-server-start.sh config/server.properties\n")])])]),s("ul",[s("li",[s("strong",[e._v("测试运行Kafka")])])]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#使用自带脚本向topic 发送数据")]),e._v("\nbin/kafka-console-producer.sh --broker-list worker:9092 --topic "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#使用自带脚本消费topic 数据（从头消费数据）")]),e._v("\nbin/kafka-console-consumer.sh --bootstrap-server worker:9092 --topic "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n--from-beginning\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);