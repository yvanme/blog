(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{514:function(e,n,s){"use strict";s.r(n);var v=s(27),i=Object(v.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"centos7上实现nfs共享"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos7上实现nfs共享"}},[e._v("#")]),e._v(" CentOS7上实现NFS共享")]),e._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),s("p",[e._v("[TOC]")]),e._v(" "),s("p",[e._v("一.介绍")]),e._v(" "),s("p",[e._v("​    NFS 是Network File System的缩写，即网络文件系统。一种使用于分散式文件系统的协定，功能是让客户端通过网络访问不同主机上磁盘里的数据，主要用在类Unix系统上实现文件共享的一种方法。\n​     NFS在文件传送或信息传送过程中依赖于RPC协议。RPC，远程过程调用 (Remote Procedure Call) 是能使客户端执行其他系统中程序的一种机制。NFS本身是没有提供信息传输的协议和功能的，但NFS却能让我们通过网络进行资料的分享，这是因为NFS使用了一些其它的传输协议。而这些传输协议用到这个RPC功能的。可以说NFS本身就是使用RPC的一个程序。或者说NFS也是一个RPC SERVER。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。")]),e._v(" "),s("p",[e._v("二.服务端配置")]),e._v(" "),s("p",[e._v("1.关闭系统防火墙和selinux（针对服务器端和客户端）")]),e._v(" "),s("p",[e._v("#查看系统防火墙的状态,可以看到防火墙是开着的\n[root@linuxidc ~]#systemctl status firewalld\n● firewalld.service - firewalld - dynamic firewall daemon\nLoaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)\nActive: active (running) since Sat 2017-06-03 09:38:00 CST; 8s ago\nDocs: man:firewalld(1)\nMain PID: 24067 (firewalld)\nCGroup: /system.slice/firewalld.service\n└─24067 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid")]),e._v(" "),s("p",[e._v("Jun 03 09:37:58 linuxidc systemd[1]: Starting firewalld -\ndynamic firewall daemon...")]),e._v(" "),s("p",[e._v("Jun 03 09:38:00 linuxidc systemd[1]: Started firewalld - dynamic firewall\ndaemon.")]),e._v(" "),s("p",[e._v("#关闭防火墙")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl stop firewalld")]),e._v(" "),s("p",[e._v("#再次查看防火墙,可以看到已经关闭了")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl status firewalld")]),e._v(" "),s("p",[e._v("● firewalld.service - firewalld - dynamic firewall\ndaemon")]),e._v(" "),s("p",[e._v("Loaded: loaded\n(/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)")]),e._v(" "),s("p",[e._v("Active: inactive (dead)")]),e._v(" "),s("p",[e._v("Docs: man:firewalld(1)")]),e._v(" "),s("p",[e._v("Jun 01 11:33:35 localhost systemd[1]: Starting firewalld - dynamic firewall daemon...\nJun 01 11:33:44 localhost systemd[1]: Started firewalld - dynamic firewall daemon.\nJun 03 09:11:32 linuxidc systemd[1]: Stopping firewalld - dynamic firewall daemon...\nJun 03 09:11:34 linuxidc systemd[1]: Stopped firewalld - dynamic firewall daemon.\nJun 03 09:37:58 linuxidc systemd[1]: Starting firewalld - dynamic firewall daemon...\nJun 03 09:38:00 linuxidc systemd[1]: Started firewalld - dynamic firewall daemon.\nJun 03 09:38:34 linuxidc systemd[1]: Stopping firewalld - dynamic firewall daemon...\nJun 03 09:38:36 linuxidc systemd[1]: Stopped firewalld - dynamic firewall daemon.\n#查看selinux的运行模式,现在为强制模式\n[root@linuxidc share]#getenforce")]),e._v(" "),s("p",[e._v("Enforcing")]),e._v(" "),s("p",[e._v("#把selinux设为许可模式")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#setenforce 0")]),e._v(" "),s("p",[e._v("#再次查看selinux的运行模式,已经变为许可模式")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#getenforce")]),e._v(" "),s("p",[e._v("Permissive")]),e._v(" "),s("p",[e._v("#要想禁用selinux,则需要编辑selinux的配置文件,把SELINUX设置成disabled,然后重启生效")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#vi /etc/sysconfig/selinux")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#cat /etc/sysconfig/selinux")]),e._v(" "),s("p",[e._v("This file controls the state of SELinux on the system.")]),e._v(" "),s("p",[e._v("SELINUX= can take one of these three values:")]),e._v(" "),s("p",[e._v("enforcing - SELinux security policy")]),e._v(" "),s("p",[e._v("is enforced.")]),e._v(" "),s("p",[e._v("permissive - SELinux prints")]),e._v(" "),s("p",[e._v("warnings instead of enforcing.")]),e._v(" "),s("p",[e._v("disabled - No SELinux policy is")]),e._v(" "),s("p",[e._v("loaded.")]),e._v(" "),s("p",[e._v("SELINUX=disabled")]),e._v(" "),s("p",[e._v("SELINUXTYPE= can take one of three two values:")]),e._v(" "),s("p",[e._v("targeted - Targeted processes are")]),e._v(" "),s("p",[e._v("protected,")]),e._v(" "),s("p",[e._v("minimum - Modification of targeted")]),e._v(" "),s("p",[e._v("policy. Only selected processes are protected.")]),e._v(" "),s("p",[e._v("mls - Multi Level Security")]),e._v(" "),s("p",[e._v("protection.")]),e._v(" "),s("p",[e._v("SELINUXTYPE=targeted")]),e._v(" "),s("p",[e._v("2.安装所需的软件包（针对服务器端和客户端）")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#yum install -y rpc-bind nfs-utils")]),e._v(" "),s("p",[e._v("3.服务端配置\nNFS服务的主要配置文件为 /etc/exports.\n/etc/exports文件内容格式：\n<输出目录> 客户端（选项:访问权限,用户映射,其他]\n输出目录是指NFS系统中所定义的共享给客户端使用的文件系统\n客户端是定义网络中可以访问这个NFS共享目录的IP地址或网段或域名等\n客户端常用的指定方式\n指定ip地址的主机：192.168.100.1\n指定一个子网：192.168.100.0/24 也可以写成:192.168.100.0/255.255.255.0\n指定域名的主机：david.bsmart.cn\n指定域中的所有主机："),s("em",[e._v(".bsmart.cn\n所有主机：")]),e._v("\n选项用来设置输出目录的访问权限、用户映射等。\nNFS主要有3类选项：\n设置输出目录只读：ro\n设置输出目录读写：rw\n用户映射选项\nall_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组（nfsnobody）；\nno_all_squash：与all_squash取反（默认设置）；\nroot_squash：将root用户及所属组都映射为匿名用户或用户组（默认设置）；\nno_root_squash：与rootsquash取反；\nanonuid=xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户（UID=xxx）；\nanongid=xxx：将远程访问的所有用户组都映射为匿名用户组账户，并指定该匿名用户组账户为本地用户组账户（GID=xxx）；\n其它选项\nsecure：限制客户端只能从小于1024的tcp/ip端口连接nfs服务器（默认设置）；\ninsecure：允许客户端从大于1024的tcp/ip端口连接服务器；\nsync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；\nasync：将数据先保存在内存缓冲区中，必要时才写入磁盘；\nwdelay：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率（默认设置）；\nno_wdelay：若有写操作则立即执行，应与sync配合使用；\nsubtree：若输  目录是一个子目录，则nfs服务器将检查其父目录的权限(默认设置)；\nno_subtree：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；")]),e._v(" "),s("p",[e._v("修改/etc/exports文件,定义NFS共享")]),e._v(" "),s("p",[e._v("#修改NFS配置文件,定义共享")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#vi /etc/exports")]),e._v(" "),s("p",[e._v("#定义向所有客户端共享/share目录,共享方式为可读可写")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#cat /etc/exports")]),e._v(" "),s("p",[e._v("/share *(rw,async,no_root_squash)")]),e._v(" "),s("p",[e._v("#创建/share这个共享目录")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#mkdir /share")]),e._v(" "),s("p",[e._v("#把共享目录的权限设定为所有用户都可读可写权限")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#chmod 766 /share")]),e._v(" "),s("p",[e._v("#把NFS加入到开机自启动选项中")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl enable nfs-server")]),e._v(" "),s("p",[e._v("Created symlink from\n/etc/systemd/system/multi-user.target.wants/nfs-server.service to\n/usr/lib/systemd/system/nfs-server.service.")]),e._v(" "),s("p",[e._v("#把RPCbind加入开机处启动选项中")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl enable rpcbind")]),e._v(" "),s("p",[e._v("#启动RPCbind")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl start rpcbind")]),e._v(" "),s("p",[e._v("#开启NFS服务")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#systemctl start nfs-server")]),e._v(" "),s("p",[e._v("#查看NFS服务的状态 ,可以看到NFS服务已经在运行中\n[root@linuxidc ~]#systemctl status nfs-server\n● nfs-server.service - NFS server and services\nLoaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)\nActive: active (exited) since Sat 2017-06-03 09:22:02 CST; 37min ago\nMain PID: 23967 (code=exited, status=0/SUCCESS)\nCGroup: /system.slice/nfs-server.service")]),e._v(" "),s("p",[e._v("Jun 03 09:22:02 linuxidc systemd[1]: Starting NFS server and services...\nJun 03 09:22:02 linuxidc systemd[1]: Started NFS server and services.\n#查看本机共享的文件系统\n[root@linuxidc ~]#exportfs\n/share          "),s("world")],1),e._v(" "),s("p",[e._v("三.客户端配置:")]),e._v(" "),s("p",[e._v("1.客户端关闭防火墙和selinux,方法同上.")]),e._v(" "),s("p",[e._v("2.客户端安装NFS软件包,并把NFS服务设为开机自启动,方法同上.")]),e._v(" "),s("p",[e._v("3.挂载共享的NFS文件系统")]),e._v(" "),s("p",[e._v("#把192.168.16.29这个主机上的共享目录挂载到本机的/share上\n[root@linuxidc ~]#mount -t nfs 192.168.16.29:/share /share")]),e._v(" "),s("p",[e._v("#查看是否已经挂载成功\n[root@linuxidc ~]#df -h")]),e._v(" "),s("p",[e._v("文件系统                 容量  已用  可用 已用% 挂载点")]),e._v(" "),s("p",[e._v("/dev/mapper/centos-root   17G  1.1G   16G    7% /")]),e._v(" "),s("p",[e._v("devtmpfs                 476M     0  476M    0% /dev")]),e._v(" "),s("p",[e._v("tmpfs                    488M     0  488M    0% /dev/shm")]),e._v(" "),s("p",[e._v("tmpfs                    488M  7.7M  480M    2% /run")]),e._v(" "),s("p",[e._v("tmpfs                    488M     0  488M    0% /sys/fs/cgroup")]),e._v(" "),s("p",[e._v("/dev/sda1               1014M  130M  885M   13% /boot")]),e._v(" "),s("p",[e._v("tmpfs                     98M     0   98M    0% /run/user/0")]),e._v(" "),s("p",[e._v("192.168.153.130:/share    17G  1.1G   16G    7% /share")]),e._v(" "),s("p",[e._v("#把共享目录写入系统挂载文件系统\n[root@linuxidc ~]#vi /etc/fstab\n[root@linuxidc ~]#cat /etc/fstab | grep media\n192.168.16.29:/share        /media      nfs4    defaults    0 0")]),e._v(" "),s("p",[e._v("四.测试:")]),e._v(" "),s("p",[e._v("1.在服务端共享目录中新建一个10M大小的文件")]),e._v(" "),s("p",[e._v("[root@linuxidc media]#cd /share")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#ls")]),e._v(" "),s("p",[e._v("#在NFS共享目录上新建一个10M大小的文件,提示成功")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#dd if=/dev/zero of=/share/f1 bs=1M count=10")]),e._v(" "),s("p",[e._v("10+0 records in")]),e._v(" "),s("p",[e._v("10+0 records out")]),e._v(" "),s("p",[e._v("10485760 bytes (10 MB) copied, 0.0351504 s, 298 MB/s")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#ll -h")]),e._v(" "),s("p",[e._v("total 10M")]),e._v(" "),s("p",[e._v("-rw-r--r--. 1 root root 10M Jun  3 10:14\nf1")]),e._v(" "),s("p",[e._v("2.在客户端新建另一个文件f2,同时尝试删除另一个文件f1")]),e._v(" "),s("p",[e._v("[root@linuxidc ~]#cd /media")]),e._v(" "),s("p",[e._v("[root@linuxidc media]#ls")]),e._v(" "),s("p",[e._v("f1")]),e._v(" "),s("p",[e._v("#在共享目录上新建一个文件f2,未报错")]),e._v(" "),s("p",[e._v("[root@linuxidc media]#touch f2")]),e._v(" "),s("p",[e._v("#删除存在的文件f1,未报错")]),e._v(" "),s("p",[e._v("[root@linuxidc media]#rm -f f1")]),e._v(" "),s("p",[e._v("3.在服务端查看共享目录中的文件")]),e._v(" "),s("p",[e._v("[root@linuxidc share]#ls\nf2")])])}),[],!1,null,null,null);n.default=i.exports}}]);